<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法-分而治之</title>
    <link href="/2022/09/06/%E7%AE%97%E6%B3%95/"/>
    <url>/2022/09/06/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>时间复杂度分析方法有以下三种：</p><ul><li>递归树法</li><li>代入法</li><li>主定理法</li></ul><h3 id="递归树法"><a href="#递归树法" class="headerlink" title="递归树法"></a>递归树法</h3><p>以归并排序为例，时间复杂度的递归表达式为<br><img src="/2022-09-07-12-58-45.png"><br>画出该表达式的递归树<br><img src="/2022-09-07-13-00-16.png"><br> →下的若干分叉表示当前节点的复杂度由下属子结点的复杂度组成。则根节点的复杂度等于叶子结点的复杂度之和。即若干O(1)的叶子结点和红色部分的O(n&#x2F;x)之和。</p><p> 递归树的深度（从根节点到最底层）为$log_2 n$，每一层的O(n&#x2F;x)部分相加为n。则红色部分的复杂度相加为$nlog_2 n$</p><p>最底层的黑色叶子结点共有$2^{log_2 n}&#x3D;n$个，每个叶子结点的复杂度为O(1)，所以黑色部分的复杂度相加为$n+nlog_2 n$</p><p>故T(n)&#x3D;O(nlogn)</p><p>类似地，对于下面的复杂度递归式，可做出同样的分析，唯一不同的是该递归树的各个子树的规模不同，为此我们考虑树高最大为$log_{\frac{4}{3}} n+1$，最底层的n&#x2F;x部分相加小于等于n。<br><img src="/2022-09-07-13-24-20.png"><br><img src="/2022-09-07-13-13-54.png"></p><p>故$T(n) \leq nlog_{\frac{4}{3}} n + 2^{log_{\frac{4}{3}} n}  ,T(n)&#x3D;O(nlogn)$</p><p>接下来，思考该界是否为渐进紧确界。引入<strong>代入法</strong>进行说明</p><h3 id="代入法"><a href="#代入法" class="headerlink" title="代入法"></a>代入法</h3><p>代入法的主要作用&#x2F;流程是：</p><ul><li>得到算法的时间复杂度递归表达式</li><li>猜测算法的渐进紧确界</li><li>利用数学归纳法进行归纳验证</li></ul><p>以上述的复杂度表达式为例<img src="/2022-09-07-13-24-35.png"><br>猜测算法的渐进紧确界为$T(n)&#x3D;\Theta(nlogn)$，接下来利用数学归纳法进行证明<br><img src="/2022-09-07-13-28-32.png"></p><p>这种方法具有很大的局限性，当猜测解不易得到时我们就需要用到<strong>主定理法</strong>了。</p><h3 id="主定理法"><a href="#主定理法" class="headerlink" title="主定理法"></a>主定理法</h3><p>主定理法关注形如$T(n)&#x3D;aT(\frac{n}{b})+f(n)$的一类递归式。</p><p>首先画出递归树进行分析<br><img src="/2022-09-07-13-33-47.png"><br>树高$log_b n$，最终共产生O(1)的普通叶子结点$a^{log_b n}&#x3D;n^{log_b a}$和常量叶子若干，则可推出T(n)<br><img src="/2022-09-07-13-36-31.png"></p><p>考虑Taylor公式得到主定理如下：<br><img src="/2022-09-07-13-42-55.png"><br>上图所做的比较实际是在衡量分而治之过程中的分解规模带来的影响与递归合并带来的影响之间的平衡。</p><p>特别地，对于$f(n)&#x3D;n^k$的简化情况，主定理可以相应地化简为以下形式（<strong>重要</strong>）</p><p>在某些情况下，落入①②或②③的条件中间，此种情况下可以使用主定理的扩展形式<br><img src="/2022-09-07-13-53-17.png"></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>问题：求解数组的非空子数组，使子数组元素之和最大<br><img src="/2022-09-07-13-54-47.png"><br>利用分而治之的思想做出尝试：</p><ul><li>分解问题</li><li>递归求解 </li><li>合并</li></ul><p>首先尝试将数组一分为二<br><img src="/2022-09-07-13-56-09.png"><br>接下来考虑递归求解，原数组的最大非空子数组可能的情况有：</p><ol><li>等于原数组左半部分的最大非空子数组</li><li>等于原数组右半部分的最大非空子数组</li><li>横跨原数组的左右半部</li></ol><p>分别记数组X左半部分的最大子数组，数组X右半部分的最大子数组，跨越重点的最大子数组为$S_1,S_2,S_3$，则数组X的最大子数组为$S_max&#x3D;max{S_1,S_2,S_3}$</p><p>接下来求解$S_3$<br><img src="/2022-09-07-14-03-56.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>compiler theory</title>
    <link href="/2022/09/05/compiler-technology/"/>
    <url>/2022/09/05/compiler-technology/</url>
    
    <content type="html"><![CDATA[<h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p><img src="/2022-09-08-11-30-08.png"></p><h3 id="输出形式"><a href="#输出形式" class="headerlink" title="输出形式"></a>输出形式</h3><p>词法分析程序将单词按照内部形式输出，有以下几种方案：</p><ol><li>按单词种类分类</li><li>保留字和分界符一符一类</li><li>标识符和常数的单词值作为指示字<br><img src="/2022-09-08-11-34-38.png"><br><img src="/2022-09-08-11-34-58.png"></li></ol><h3 id="（左）正则文法与状态机"><a href="#（左）正则文法与状态机" class="headerlink" title="（左）正则文法与状态机"></a>（左）正则文法与状态机</h3><p><strong>正则文法</strong><br>例如：</p><ul><li>Z::&#x3D;U0|V1</li><li>U::&#x3D;Z1|1</li><li>V::&#x3D;Z0|0<br>正则文法是 型文法</li></ul><p>由正则文法得到对应的<strong>状态图</strong>，其组成成分如下：</p><ul><li>初始状态：空字符串</li><li>状态：非终结符</li><li>触发：终结符</li><li><strong>终止状态</strong>：文法的开始符号</li></ul><p><img src="/2022-09-08-10-28-15.png"></p><p>输入字符串，由空串状态进行字符的读入和分析，在此过程进行状态之间的转换，若最终到达终止状态，则该字符串符合文法的规则。</p><p>上述过程实际是句子从左到右扫描字符向上规约到根节点的过程。（自底向上）</p><blockquote><p>TODO:确定句柄</p></blockquote><h3 id="实现程序"><a href="#实现程序" class="headerlink" title="实现程序"></a>实现程序</h3><p>（简易）状态机如图，词法分析程序所要完成的工作就是读入字符并遍历状态机进行规约<br><img src="/2022-09-08-11-03-45.png"><br>在程序读入过程中存在一个回退的过程：当识别出某一token(x)时，实际多读了一个字符(x&#x3D;)，故需要回退一个字符一遍下一个token的分析判断</p><p>此外还需进行数据结构的建立</p><ul><li>单词和内部表示（名称，类别编码，记忆符，单词值）</li><li>设置词法分析程序所需要的公共变量和过程</li></ul><p><img src="/2022-09-08-11-01-14.png"></p><p>伪代码如下：</p><p><img src="/2022-09-08-11-08-25.png"></p><h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>语法分析的基本功能是从源程序的单词符号串中识别出（句子层面的）语法成分并进行语法检查。</p><p>两大分析方法是自顶向下和自底向上</p><h3 id="自顶向下分析算法"><a href="#自顶向下分析算法" class="headerlink" title="自顶向下分析算法"></a>自顶向下分析算法</h3><p>自顶向下的分析过程是设法建立一颗语法树，使得语法树的末端节点组成目标符号串。分析过程是不断试探的过程，当发现某一推导无法匹配字符串时，需要<strong>回溯</strong>并更换推导所用的规则。</p><p>自顶向下的两个主要问题是<strong>左递归问题</strong>（死循环）和<strong>回溯问题</strong>（效率问题）。</p><h4 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h4><p>消除左递归的方法为</p><ol><li>使用扩充的BNF规则</li><li>改写为右递归</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HelloWorld</title>
    <link href="/2022/09/04/HelloWorld/"/>
    <url>/2022/09/04/HelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-get-your-own-site"><a href="#How-to-get-your-own-site" class="headerlink" title="How to get your own site"></a>How to get your own site</h1><blockquote><p>一篇通过Hexo部署个人博客的简单总结</p></blockquote><ul><li><a href="#how-to-get-your-own-site">How to get your own site</a><ul><li><a href="#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">环境搭建</a><ul><li><a href="#git">Git</a><ul><li><a href="#login">login</a></li><li><a href="#ssh%E5%AF%86%E9%92%A5">ssh密钥</a></li><li><a href="#githubio">github.io</a></li></ul></li><li><a href="#node--cnpm--hexo">node &amp; cnpm &amp; hexo</a></li></ul></li><li><a href="#%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5">部署到github个人主页</a></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">常用命令</a></li><li><a href="#%E4%B8%80%E4%BA%9B%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91">一些踩过的坑</a></li><li><a href="#references">references</a></li></ul></li></ul></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>在官网下载Git后，依次执行以下命令在本地配置仓库权限</p><h4 id="login"><a href="#login" class="headerlink" title="login"></a>login</h4><p>进入Git bash</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;你注册时的用户名&quot;</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&quot;注册时的邮箱&quot;</span><br></code></pre></td></tr></table></figure><h4 id="ssh密钥"><a href="#ssh密钥" class="headerlink" title="ssh密钥"></a>ssh密钥</h4><p>在Git Bash中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cd ~/.ssh<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;your email&quot;</span><br>cat id_rsa.pub <span class="hljs-string">&quot;copy it&quot;</span><br></code></pre></td></tr></table></figure><p>来到Github个人页面的<code>setting-&gt;Deploy keys-&gt;Add deploy key-&gt;key</code>，粘贴刚刚复制的ssh密钥，title随便填<br><img src="/2022-09-05-00-04-37.png"></p><h4 id="github-io"><a href="#github-io" class="headerlink" title="github.io"></a>github.io</h4><p>新建一个名为yourname.github.io的仓库</p><h3 id="node-amp-cnpm-amp-hexo"><a href="#node-amp-cnpm-amp-hexo" class="headerlink" title="node &amp; cnpm &amp; hexo"></a>node &amp; cnpm &amp; hexo</h3><p><a href="https://nodejs.org/en/download/">node.js</a>官网安装nodejs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">node -v <span class="hljs-comment">#查看版本/是否安装成功</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">npm install -g cnpm --registry==https://registry.npm.taobao.org <br><span class="hljs-comment"># 安装cnpm</span><br>cnpm -v<br><span class="hljs-comment"># 查看版本/是否安装成功</span><br>cnpm install -g hexo-clicnpm install -g hexo-cli<br><span class="hljs-comment"># 安装hexo</span><br>hexo -v<br><span class="hljs-comment"># 查看版本/是否安装成功 </span><br>mkdir Blog<br><span class="hljs-comment"># 新建博客文件夹，可以在任何位置</span><br>hexo init<br><span class="hljs-comment"># 初始化hexo</span><br>hexo g<br><span class="hljs-comment"># 生成</span><br>hexo s<br><span class="hljs-comment"># 启动服务，本地预览</span><br></code></pre></td></tr></table></figure><h2 id="部署到github个人主页"><a href="#部署到github个人主页" class="headerlink" title="部署到github个人主页"></a>部署到github个人主页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 下载hexo-deployer-git插件</span><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改<code>Blog\_config.yml</code>文件配置为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: github上对应仓库的ssh 链接              <br>  branch: main<br></code></pre></td></tr></table></figure><p>之后将本地博客推送到github仓库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo d <br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>新建md文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo new <span class="hljs-string">&quot;title&quot;</span><br><span class="hljs-comment">#文件位于Blog\source\_posts</span><br></code></pre></td></tr></table></figure></li><li>新建其他文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一般是页面配置的一些文件</span><br>hexo new page <span class="hljs-string">&quot;about&quot;</span><br></code></pre></td></tr></table></figure></li><li>删除文章<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">rm Blog\_post\target.md<br>hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>hexo d可能会有点慢，耐心等下就好了</li><li>本地预览<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo s<br></code></pre></td></tr></table></figure></li></ol><h3 id="一些踩过的坑"><a href="#一些踩过的坑" class="headerlink" title="一些踩过的坑"></a>一些踩过的坑</h3><ol><li>要记得配ssh密钥（<del>一直以来只配了oo账号的ssh(×)</del>)，否则会在<code>hexo d</code>的时候出现permission denied</li><li>npm下载插件速度慢，卡在sill idealTree buildDeps<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> 打开cmd 配置淘宝镜像<br>npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br><br><span class="hljs-number">2.</span> 关闭上面cmd, 打开一个新的cmd 安装vue/cli(之前在一个cmd连续执行,总会卡死)<br>npm install -g @vue/cli<br></code></pre></td></tr></table></figure></li></ol><h3 id="references"><a href="#references" class="headerlink" title="references"></a>references</h3><ol><li><a href="https://blog.csdn.net/weixin_42490383/article/details/125895180">https://blog.csdn.net/weixin_42490383/article/details/125895180</a></li><li><a href="https://blog.csdn.net/ItDaChuang/article/details/111261426">https://blog.csdn.net/ItDaChuang/article/details/111261426</a></li><li><a href="https://blog.csdn.net/qq_44732432/article/details/124714408">https://blog.csdn.net/qq_44732432/article/details/124714408</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
